imagePullSecrets:


# 持久化
persistence:  # mysql
  init: false
  storageClass:
  accessMode: ReadWriteOnce
  size: 8Gi

mysql:
  enabled: true
  image: mysql:5.7
  pullPolicy: IfNotPresent
  rootPassword: root
  database: arkid

externalDatabase:
  host: ""
  port: 3306
  database: ""
  user: ""
  password: ""

redis:
  enabled: true
  image: redis:5.0.3
  pullPolicy: IfNotPresent

externalRedis:
  host: ""
  port: 6379
  db: 0

ldap:
  image: longguikeji/arkid_ldap_server:v2dev
  pullPolicy: IfNotPresent
  ## service 的类型，ClusterIP, NodePort, LoadBalancer
  svcType: NodePort
  # 当svcType为NodePort时有效，ldap 389暴露到nodePort的端口, 留空则会随机挑选一个端口
  nodePort389: 30189
  
be:
  image: longguikeji/arkid:v2dev-115
  pullPolicy: IfNotPresent
  ## {  "limits": {"cpu": "800m","memory": "1024Mi"},"requests": {"cpu": "200m","memory": "256Mi"}}
  resources:
    limits: {}
    requests: {"cpu": "300m","memory": "1024Mi"}

fe:
  image: longguikeji/arkid-fe:v2dev-38
  pullPolicy: IfNotPresent
  ## {  "limits": {"cpu": "800m","memory": "1024Mi"},"requests": {"cpu": "200m","memory": "256Mi"}}
  resources:
    limits: {}
    requests: {"cpu": "200m","memory": "1024Mi"}

# webServerBroker:
#   ## 如果单独部署arkid，那么arkOS留空, webServerBroker 下的参数都不用填了；
#   ## 否则填写arkOS的api地址：例如：http://ark-apisvr
#   arkOS:
#   name: web-server-broker
#   image: longguikeji/arkid-broker:1.0.0
#   pullPolicy: IfNotPresent
#   port: 8080

portal:
  image: nginx:alpine
  pullPolicy: IfNotPresent
  ## service 的类型，ClusterIP, NodePort, LoadBalancer
  svcType: ClusterIP


nameOverride: ""
fullnameOverride: ""

ingress:
  enabled: true
  # cert-manager 
  cert: false
  annotations: {"kubernetes.io/ingress.class": "nginx","certmanager.k8s.io/cluster-issuer": "letsencrypt-prod"}
  host:
    # 需要DNS解析到ingress的ip
    # 本地调试就在 /etc/hosts里配置一下
    name: arkid.longguikeji.com
  # 如果没有 cert-manager，tls为true则helm会生成一个自签名的证书存到secret
  tls: true



